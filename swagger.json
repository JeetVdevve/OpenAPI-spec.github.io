{
  "components": {
    "schemas": {
      "ChargingSessionStatus": {
        "enum": ["completed", "active"],
        "type": "string"
      },
      "Address": {
        "properties": {
          "city": { "type": "string" },
          "country": { "type": "string" },
          "postalCode": { "type": "string" },
          "state": { "type": "string" },
          "street": { "type": "string" },
          "unit": { "type": "string" }
        },
        "required": ["street", "city", "state", "country", "postalCode"],
        "type": "object"
      },
      "AuthResponse": {
        "properties": {
          "accessToken": { "$ref": "#/components/schemas/Token" },
          "refreshToken": { "$ref": "#/components/schemas/Token" },
          "userId": { "type": "string" }
        },
        "required": ["accessToken", "refreshToken", "userId"],
        "type": "object"
      },
      "Charger": {
        "properties": {
          "availability": {
            "$ref": "#/components/schemas/ChargerAvailability"
          },
          "connectorType": { "$ref": "#/components/schemas/ConnectorType" },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "locationId": { "type": "string" },
          "maxKw": { "type": "number" },
          "pricePerHour": { "type": "number" }
        },
        "required": [
          "id",
          "availability",
          "connectorType",
          "pricePerHour",
          "maxKw",
          "description"
        ],
        "type": "object"
      },
      "ChargerAvailability": {
        "enum": [
          "preparing",
          "charging",
          "finished",
          "available",
          "out_of_order"
        ],
        "type": "string"
      },
      "ChargerReservation": {
        "properties": {
          "chargerId": { "type": "string" },
          "endTime": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "startTime": { "type": "string" },
          "userId": { "type": "string" }
        },
        "required": ["startTime", "endTime", "userId", "chargerId", "id"],
        "type": "object"
      },
      "ChargingLocation": {
        "properties": {
          "address": { "$ref": "#/components/schemas/Address" },
          "chargers": {
            "items": { "$ref": "#/components/schemas/Charger" },
            "type": "array"
          },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "latitude": { "type": "number" },
          "locationType": {
            "enum": ["public", "restricted"],
            "type": "string"
          },
          "longitude": { "type": "number" },
          "name": { "type": "string" },
          "provider": { "$ref": "#/components/schemas/LocationProvider" }
        },
        "required": [
          "provider",
          "address",
          "name",
          "id",
          "longitude",
          "latitude",
          "chargers",
          "description",
          "locationType"
        ],
        "type": "object"
      },
      "ChargingSession": {
        "properties": {
          "name": { "type": "string" },
          "batteryPercentageLast": { "type": "number" },
          "batteryPercentageStart": { "type": "number" },
          "chargerId": { "type": "string" },
          "consumption": { "type": "number" },
          "cost": { "type": "number" },
          "endTime": {
            "description": "Set when the user ends the charging session",
            "type": "string"
          },
          "id": { "type": "string" },
          "kwPerHour": { "type": "number" },
          "rfIdTag": { "type": "string" },
          "startTime": { "type": "string" },
          "userId": { "type": "string" },
          "vehicleId": { "type": "string" }
        },
        "required": [
          "id",
          "chargerId",
          "startTime",
          "consumption",
          "cost",
          "userId",
          "vehicleId",
          "kwPerHour"
        ],
        "type": "object"
      },
      "ConnectorType": {
        "enum": ["Type 1", "Type 2", "CCS", "CHAdeMO"],
        "type": "string"
      },
      "ElectricityRates": {
        "properties": {
          "midPeak": { "type": "number" },
          "offPeak": { "type": "number" },
          "onPeak": { "type": "number" }
        },
        "type": "object"
      },
      "Error": {
        "properties": {
          "message": { "type": "string" },
          "type": { "$ref": "#/components/schemas/ErrorType" }
        },
        "required": ["type"],
        "type": "object"
      },
      "ErrorType": {
        "enum": [
          "UnexpectedError",
          "UserInputValidationFailure",
          "InvalidEmailVerificationCode",
          "AuthenticationFailure",
          "AuthorizationFailure",
          "EmailAlreadyInUse"
        ],
        "type": "string"
      },
      "LocationProvider": { "enum": ["soneil", "spark"], "type": "string" },
      "PrivateCharger": {
        "properties": {
          "charger": { "$ref": "#/components/schemas/Charger" },
          "electricityRates": {
            "$ref": "#/components/schemas/ElectricityRates"
          },
          "metadata": { "$ref": "#/components/schemas/PrivateChargerMetadata" },
          "schedule": { "$ref": "#/components/schemas/PrivateChargerSchedule" }
        },
        "required": ["charger", "electricityRates", "metadata", "schedule"],
        "type": "object"
      },
      "PrivateChargerIcon": {
        "enum": ["home", "building", "buildings"],
        "type": "string"
      },
      "PrivateChargerMetadata": {
        "properties": {
          "icon": { "$ref": "#/components/schemas/PrivateChargerIcon" },
          "isDefault": { "type": "boolean" },
          "name": { "type": "string" }
        },
        "required": ["name", "icon", "isDefault"],
        "type": "object"
      },
      "PrivateChargerSchedule": {
        "properties": {
          "days": {
            "items": {
              "enum": ["mon", "tue", "wed", "thu", "fri", "sat", "sun"],
              "type": "string"
            },
            "type": "array"
          },
          "endTime": { "description": "ms since midnight", "type": "number" },
          "startTime": { "description": "ms since midnight", "type": "number" },
          "vehicleId": { "type": "string" }
        },
        "required": ["startTime", "endTime", "days"]
      },
      "Token": {
        "properties": {
          "expiryDate": { "type": "string" },
          "token": { "type": "string" }
        },
        "required": ["expiryDate", "token"],
        "type": "object"
      },
      "Transaction": {
        "properties": {
          "amount": { "type": "number" },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "timestamp": { "type": "string" },
          "type": {
            "enum": ["manual_load", "auto_load", "charging_session_payment"],
            "type": "string"
          },
          "sessionId": { "type": "string" }
        },
        "required": ["id", "amount", "timestamp", "type"],
        "type": "object"
      },
      "User": {
        "properties": {
          "address": { "$ref": "#/components/schemas/Address" },
          "defaultVehicleId": { "type": "string" },
          "email": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "phone": { "type": "string" },
          "walletCardNumber": { "type": "string" }
        },
        "required": ["id", "email"],
        "type": "object"
      },
      "UserInfo": {
        "properties": {
          "country": { "type": "string" },
          "name": { "type": "string" },
          "phone": { "type": "string" },
          "postalCode": { "type": "string" }
        },
        "type": "object"
      },
      "Vehicle": {
        "properties": {
          "connectorType": { "$ref": "#/components/schemas/ConnectorType" },
          "id": { "type": "string" },
          "make": { "type": "string" },
          "model": { "type": "string" },
          "nickname": { "type": "string" },
          "year": { "type": "string" }
        },
        "required": [
          "id",
          "make",
          "model",
          "year",
          "nickname",
          "connectorType"
        ],
        "type": "object"
      },
      "VehicleInput": {
        "properties": {
          "connectorType": { "$ref": "#/components/schemas/ConnectorType" },
          "make": { "type": "string" },
          "model": { "type": "string" },
          "nickname": { "type": "string" },
          "year": { "type": "string" }
        },
        "required": ["make", "model", "year", "nickname", "connectorType"],
        "type": "object"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": { "title": "Soneil EV Charger App API", "version": "1.0.0" },
  "openapi": "3.0.0",
  "paths": {
    "/debug/{chargerId}/availability": {
      "post": {
        "description": "Change availability of a charger",
        "parameters": [
          {
            "description": "ID of the charger",
            "in": "path",
            "name": "chargerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "availability": {
                    "$ref": "#/components/schemas/ChargerAvailability"
                  }
                },
                "required": ["availability"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "OK" },
          "404": { "description": "Charger cannot be found" },
          "500": { "description": "Charger is not in the correct state" }
        },
        "tags": ["Debug"]
      }
    },
    "/v1/auth/apple": {
      "post": {
        "description": "Takes a code from the client that we can use to look up the user's basic information.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "code": { "type": "string" } },
                "required": ["code"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid code"
          }
        },
        "summary": "Sign in with Apple",
        "tags": ["Auth"]
      }
    },
    "/v1/auth/google": {
      "post": {
        "description": "Takes an ID token from the client that we can use to look up the user's basic information.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "idToken": { "type": "string" } },
                "required": ["idToken"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid ID token"
          }
        },
        "summary": "Sign in with Google",
        "tags": ["Auth"]
      }
    },
    "/v1/auth/log-in": {
      "post": {
        "description": "Takes an email address, fromRequestCode, and fromEmailCode. The fromRequestCode is the code from the \"Send email code\" request and the fromEmailCode is the code the user gets from the email that's sent.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": { "type": "string" },
                  "fromEmailCode": { "type": "string" },
                  "fromRequestCode": { "type": "string" }
                },
                "required": ["email", "fromRequestCode", "fromEmailCode"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid code"
          }
        },
        "summary": "Log in with code",
        "tags": ["Auth"]
      }
    },
    "/v1/auth/log-out": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refreshToken": { "type": "string" },
                  "userId": { "type": "string" }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid token or user ID"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Log out by revoking a single token or all tokens for a user.",
        "tags": ["Auth"]
      }
    },
    "/v1/auth/refreshAccessToken": {
      "post": {
        "description": "Takes a refresh token and returns a fresh access token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "refreshToken": { "type": "string" } },
                "required": ["refreshToken"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            },
            "description": "Returns a new access token"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "The refresh token is invalid or has expired"
          }
        },
        "tags": ["Auth"]
      }
    },
    "/v1/auth/send-code": {
      "post": {
        "description": "Takes an email address and returns back a code while also sending a code to the email address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "email": { "type": "string" } },
                "required": ["email"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": { "code": { "type": "string" } },
                  "required": ["code"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid email address"
          }
        },
        "summary": "Send email code",
        "tags": ["Auth"]
      }
    },
    "/v1/charge/{sessionId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChargingSession" }
              }
            },
            "description": "OK"
          },
          "404": { "description": "Charging session cannot be found" }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["Charge"]
      }
    },
    "/v1/charge/{sessionId}/stop": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "404": { "description": "Charging session cannot be found" },
          "500": { "description": "Charger is not in the correct state" }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["Charge"]
      }
    },
    "/v1/charger/{chargerId}": {
      "get": {
        "description": "Returns a charger",
        "parameters": [
          {
            "description": "ID of the charger",
            "in": "path",
            "name": "chargerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Charger" }
              }
            },
            "description": "OK"
          },
          "404": { "description": "Charger cannot be found" }
        },
        "summary": "Get charger",
        "tags": ["Chargers"]
      }
    },
    "/v1/charger/{chargerId}/flash": {
      "post": {
        "parameters": [
          {
            "description": "ID of the charger",
            "in": "path",
            "name": "chargerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Charger cannot be found"
          }
        },
        "summary": "Tells a charger to flash",
        "tags": ["Chargers"]
      }
    },
    "/v1/charger/{chargerId}/issue": {
      "post": {
        "parameters": [
          {
            "description": "ID of the charger",
            "in": "path",
            "name": "chargerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": { "type": "string" },
                  "userId": { "type": "string" }
                },
                "required": ["description"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Charger" }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Report an issue with the charger",
        "tags": ["Chargers"]
      }
    },
    "/v1/charger/{chargerId}/start": {
      "post": {
        "description": "Starts a charging session",
        "parameters": [
          {
            "description": "ID of the charger",
            "in": "path",
            "name": "chargerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "rfIdTag": {
                    "description": "this should be passed when a user has multiple tags associated with their account",
                    "type": "string"
                  },
                  "userId": { "type": "string" },
                  "vehicleId": { "type": "string" }
                },
                "required": ["userId", "vehicleId"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChargingSession" }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Charger cannot be found or is not available"
          },
          "500": { "description": "Charger is not in the correct state" }
        },
        "tags": ["Chargers"]
      }
    },
    "/v1/chargerLocation/{locationId}": {
      "get": {
        "parameters": [
          {
            "description": "ID of the location",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChargingLocation" }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Charging location cannot be found"
          }
        },
        "summary": "Get charging location",
        "tags": ["Chargers"]
      }
    },
    "/v1/chargerLocations": {
      "get": {
        "description": "Returns a list of charging locations",
        "parameters": [
          {
            "in": "query",
            "name": "minLongitude",
            "required": true,
            "schema": { "type": "number" }
          },
          {
            "in": "query",
            "name": "maxLongitude",
            "required": true,
            "schema": { "type": "number" }
          },
          {
            "in": "query",
            "name": "minLatitude",
            "required": true,
            "schema": { "type": "number" }
          },
          {
            "in": "query",
            "name": "maxLatitude",
            "required": true,
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/ChargingLocation" },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get charging locations",
        "tags": ["Chargers"]
      }
    },
    "/v1/chargers/{locationId}": {
      "get": {
        "parameters": [
          {
            "description": "ID of the location",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/Charger" },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": { "description": "Not Found" }
        },
        "summary": "Get chargers at a location",
        "tags": ["Chargers"]
      }
    },
    "/v1/reservation/charger/{chargerId}": {
      "get": {
        "description": "Gets reservations for a charger for a given time range",
        "parameters": [
          {
            "description": "ID of the charger",
            "in": "path",
            "name": "chargerId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Start time of the range",
            "in": "query",
            "name": "gteStartTime",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "End time of the range",
            "in": "query",
            "name": "lteEndTime",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "endTime": { "type": "string" },
                      "startTime": { "type": "string" }
                    },
                    "required": ["startTime", "endTime"],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": { "description": "Something went wrong" }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["Reservation"]
      },
      "post": {
        "description": "Reserves a charger for a given time range",
        "parameters": [
          {
            "description": "ID of the charger",
            "in": "path",
            "name": "chargerId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "endTime": { "type": "string" },
                  "startTime": { "type": "string" },
                  "userId": { "type": "string" }
                },
                "required": ["startTime", "endTime", "userId"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChargerReservation" }
              }
            },
            "description": "OK"
          },
          "500": { "description": "Something went wrong" }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["Reservation"]
      }
    },
    "/v1/reservation/user/{userId}": {
      "get": {
        "description": "Returns a list of pending reservations for a user",
        "parameters": [
          {
            "description": "ID of the user",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "End time of the range",
            "in": "query",
            "name": "gteEndTime",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ChargerReservation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": { "description": "Something went wrong" }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["Reservation"]
      }
    },
    "/v1/reservation/{id}": {
      "delete": {
        "description": "Deletes a reservation",
        "parameters": [
          {
            "description": "ID of the reservation",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "500": { "description": "Something went wrong" }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["Reservation"]
      }
    },
    "/v1/user/{id}": {
      "get": {
        "description": "Returns the user's information",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            },
            "description": "OK"
          },
          "404": { "description": "User not found" }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Get user",
        "tags": ["User Info"]
      },
      "put": {
        "description": "Update any of the following user info. If any info is omitted, it's not updated.",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "address": { "$ref": "#/components/schemas/Address" },
                  "defaultVehicleId": { "type": "string" },
                  "name": { "type": "string" }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid user ID"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized access"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update user info",
        "tags": ["User Info"]
      },
      "delete": {
        "description": "Deletes a user",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "404": { "description": "User not found" }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Delete user",
        "tags": ["User Info"]
      }
    },
    "/v1/user/{id}/balance": {
      "get": {
        "description": "Returns the user's balance",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": { "balance": { "type": "number" } },
                  "required": ["balance"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Get balance",
        "tags": ["Funding"]
      }
    },
    "/v1/user/{id}/create-load-payment-intent": {
      "post": {
        "description": "Creates a payment intent for loading money onto the platform using Stripe",
        "parameters": [
          {
            "description": "ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "amount": { "type": "number" },
                  "currency": { "type": "string" }
                },
                "required": ["amount", "currency"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "customer": { "type": "string" },
                    "ephemeralKey": { "type": "string" },
                    "paymentIntentClientSecret": { "type": "string" }
                  },
                  "required": [
                    "paymentIntentClientSecret",
                    "ephemeralKey",
                    "customer"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create payment intent",
        "tags": ["Funding"]
      }
    },
    "/v1/user/{id}/create-physical-card-payment-intent": {
      "get": {
        "description": "Returns the cost of ordering a physical card",
        "parameters": [
          {
            "description": "ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "amount": { "type": "number" },
                    "hst": { "type": "number" }
                  },
                  "required": ["amount", "hst"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["Funding"]
      },
      "post": {
        "description": "Creates a payment intent for loading money onto the platform using Stripe",
        "parameters": [
          {
            "description": "ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": { "type": "string" },
                  "address": { "$ref": "#/components/schemas/Address" }
                },
                "required": ["name", "address"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "customer": { "type": "string" },
                    "ephemeralKey": { "type": "string" },
                    "paymentIntentClientSecret": { "type": "string" }
                  },
                  "required": [
                    "paymentIntentClientSecret",
                    "ephemeralKey",
                    "customer"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create payment intent",
        "tags": ["Funding"]
      }
    },
    "/v1/user/{id}/notification_token": {
      "delete": {
        "description": "Takes a notification token and removes it from the user's account",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "platform": { "enum": ["ios", "android"], "type": "string" },
                  "token": { "type": "string" }
                },
                "required": ["token"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "OK" },
          "404": { "description": "Token not found" }
        },
        "summary": "Remove notification token",
        "tags": ["Notifications"]
      },
      "post": {
        "description": "Takes a notification token and saves it to the user's account",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "platform": { "enum": ["ios", "android"], "type": "string" },
                  "token": { "type": "string" }
                },
                "required": ["token", "platform"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": { "200": { "description": "OK" } },
        "security": [{ "BearerAuth": [] }],
        "summary": "Save notification token",
        "tags": ["Notifications"]
      }
    },
    "/v1/user/{id}/phone/send-code": {
      "post": {
        "description": "Sends a verification code to the given phone number.",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "phone": { "type": "string" } },
                "required": ["phone"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": { "code": { "type": "string" } },
                  "required": ["code"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid user ID"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized access"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Start phone number verification process",
        "tags": ["User Info"]
      }
    },
    "/v1/user/{id}/phone/verify-code": {
      "post": {
        "description": "Verifies the given code sent to the phone",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "fromRequestCode": { "type": "string" },
                  "fromSmsCode": { "type": "string" }
                },
                "required": ["fromRequestCode", "fromSmsCode"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid user ID or code"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized access"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Verify phone number",
        "tags": ["User Info"]
      }
    },
    "/v1/user/{id}/email/send-code": {
      "post": {
        "description": "Sends a verification code to the given email address in preparation to update an email address.",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "email": { "type": "string" } },
                "required": ["email"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": { "code": { "type": "string" } },
                  "required": ["code"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid user ID"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized access"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Start update email address verification process",
        "tags": ["User Info"]
      }
    },
    "/v1/user/{id}/email/verify-code": {
      "post": {
        "description": "Verifies the given code sent to the email address",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "fromRequestCode": { "type": "string" },
                  "fromEmailCode": { "type": "string" }
                },
                "required": ["fromRequestCode", "fromEmailCode"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid user ID or code"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized access"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Verify email address",
        "tags": ["User Info"]
      }
    },
    "/v1/user/{id}/sessions": {
      "get": {
        "description": "Returns a list of charging sessions",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "status",
            "schema": { "$ref": "#/components/schemas/ChargingSessionStatus" }
          },
          { "in": "query", "name": "skip", "schema": { "type": "number" } },
          { "in": "query", "name": "limit", "schema": { "type": "number" } }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/ChargingSession" },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Get charging history",
        "tags": ["User Info"]
      }
    },
    "/v1/user/{id}/sessions/count": {
      "get": {
        "description": "Returns a count of charging sessions",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "status",
            "schema": { "$ref": "#/components/schemas/ChargingSessionStatus" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": { "count": { "type": "number" } },
                  "required": ["count"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["User Info"]
      }
    },
    "/v1/user/{id}/transactions": {
      "get": {
        "description": "Returns the user's transactions",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The number of transactions to skip before giving results. Also known as an offset.",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": { "type": "number" }
          },
          {
            "description": "The number of transactions return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/Transaction" },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Get transactions",
        "tags": ["Funding"]
      }
    },
    "/v1/user/{id}/transactions/count": {
      "get": {
        "description": "Returns the number of transactions for a user",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": { "count": { "type": "number" } },
                  "required": ["count"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Get transactions count",
        "tags": ["Funding"]
      }
    },
    "/v1/user/{id}/vehicles": {
      "get": {
        "description": "Returns a list of vehicles for the user",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/Vehicle" },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid user ID"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized access"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Get vehicles",
        "tags": ["Vehicle"]
      },
      "post": {
        "description": "Creates a new vehicle for the user",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VehicleInput" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Vehicle" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid arguments"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized access"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Create a vehicle",
        "tags": ["Vehicle"]
      },
      "put": {
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": { "$ref": "#/components/schemas/VehicleInput" },
                  "vehicleId": { "type": "string" }
                },
                "required": ["vehicleId", "input"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Invalid arguments"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Update vehicle",
        "tags": ["Vehicle"]
      }
    },
    "/v1/user/{userId}/favorites": {
      "get": {
        "description": "Returns a list of charger locations that the user has marked as a favorite",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/ChargingLocation" },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["User Chargers"]
      }
    },
    "/v1/user/{userId}/favorites/{chargerLocationId}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "chargerLocationId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "OK" } },
        "security": [{ "BearerAuth": [] }],
        "summary": "Remove favorite",
        "tags": ["User Chargers"]
      },
      "post": {
        "description": "Takes a charger id and marks it as a favorite for the user",
        "parameters": [
          {
            "in": "path",
            "name": "chargerLocationId",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "OK" } },
        "security": [{ "BearerAuth": [] }],
        "summary": "Mark charger as favorite",
        "tags": ["User Chargers"]
      }
    },
    "/v1/user/{userId}/privateCharger": {
      "get": {
        "description": "Returns the user's private chargers",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/PrivateCharger" },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": { "description": "User not found" }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Get user's private charger",
        "tags": ["User Info"]
      },
      "post": {
        "description": "Adds a private charger to the user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "chargerId": { "type": "string" } },
                "required": ["chargerId"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PrivateCharger" }
              }
            },
            "description": "OK"
          },
          "404": { "description": "User not found" }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["User Info"]
      },
      "put": {
        "description": "Updates a private charger",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "chargerId": { "type": "string" },
                  "electricityRates": {
                    "$ref": "#/components/schemas/ElectricityRates"
                  },
                  "icon": { "$ref": "#/components/schemas/PrivateChargerIcon" },
                  "isDefault": { "type": "boolean" },
                  "name": { "type": "string" },
                  "schedule": {
                    "$ref": "#/components/schemas/PrivateChargerSchedule"
                  }
                },
                "required": ["chargerId"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PrivateCharger" }
              }
            },
            "description": "OK"
          },
          "404": { "description": "User or charger not found" },
          "500": { "description": "Bad input" }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["User Info"]
      },
      "delete": {
        "description": "Deletes a private charger",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": { "chargerId": { "type": "string" } },
                "required": ["chargerId"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "OK" },
          "404": { "description": "User or charger not found" },
          "500": { "description": "Bad input" }
        },
        "security": [{ "BearerAuth": [] }],
        "tags": ["User Info"]
      }
    },
    "/v1/wifi": {
      "get": {
        "description": "Returns the SSID and password to use at stations when network connectivity is poor so the user has direct access to the chargers.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "password": { "type": "string" },
                    "ssid": { "type": "string" },
                    "isOffline": { "type": "boolean" }
                  },
                  "required": ["ssid", "password", "isOffline"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get wifi SSID and password",
        "tags": ["Offline"]
      }
    },
    "/v1/vehicles": {
      "get": {
        "description": "Returns a list of vehicles",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "connectorType": {
                        "$ref": "#/components/schemas/ConnectorType"
                      },
                      "make": { "type": "string" },
                      "model": { "type": "string" },
                      "year": { "type": "string" }
                    },
                    "required": ["make", "model", "year", "connectorType"],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{ "BearerAuth": [] }],
        "summary": "Get vehicles",
        "tags": ["User Info"]
      }
    }
  },
  "servers": [
    { "description": "Development Server", "url": "http://localhost:2893" },
    {
      "description": "Staging Server",
      "url": "https://api.staging.soneil-ev.twotors.com"
    },
    { "description": "Production Server", "url": "https://TODO.com" }
  ],
  "tags": [
    { "name": "Auth" },
    { "name": "Charge" },
    { "name": "Chargers" },
    { "name": "Funding" },
    { "name": "User Chargers" },
    { "name": "User Info" },
    { "name": "Vehicle" },
    { "name": "Debug" }
  ]
}
